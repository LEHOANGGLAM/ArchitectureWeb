//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlueDataWeb.Models.Entites
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BlueDataWebEntities : DbContext
    {
        public BlueDataWebEntities()
            : base("name=BlueDataWebEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AboutCategory> AboutCategories { get; set; }
        public DbSet<Album> Albums { get; set; }
        public DbSet<Application> Applications { get; set; }
        public DbSet<Banner> Banners { get; set; }
        public DbSet<BaoGia> BaoGias { get; set; }
        public DbSet<BaoGia_GiaTri> BaoGia_GiaTri { get; set; }
        public DbSet<BaoGia_Loai> BaoGia_Loai { get; set; }
        public DbSet<CartItem> CartItems { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Comment> Comments { get; set; }
        public DbSet<Country> Countries { get; set; }
        public DbSet<District> Districts { get; set; }
        public DbSet<Document> Documents { get; set; }
        public DbSet<ExportBill> ExportBills { get; set; }
        public DbSet<ImagePage> ImagePages { get; set; }
        public DbSet<Image> Images { get; set; }
        public DbSet<LabelProduct> LabelProducts { get; set; }
        public DbSet<Membership> Memberships { get; set; }
        public DbSet<NewCategory> NewCategories { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<Price> Prices { get; set; }
        public DbSet<ProductColor> ProductColors { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductSize> ProductSizes { get; set; }
        public DbSet<ProductVariant> ProductVariants { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<Promotion> Promotions { get; set; }
        public DbSet<Provice> Provices { get; set; }
        public DbSet<QuangCao> QuangCaos { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<SendEmail> SendEmails { get; set; }
        public DbSet<Ship> Ships { get; set; }
        public DbSet<Size> Sizes { get; set; }
        public DbSet<Solution> Solutions { get; set; }
        public DbSet<SubEmail> SubEmails { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<SupportOnline> SupportOnlines { get; set; }
        public DbSet<TypeDeal> TypeDeals { get; set; }
        public DbSet<TypeVoucher> TypeVouchers { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UsersInRole> UsersInRoles { get; set; }
        public DbSet<Ward> Wards { get; set; }
        public DbSet<BaoGia_Loai_ThuocTinh> BaoGia_Loai_ThuocTinh { get; set; }
        public DbSet<SettingDB> SettingDBs { get; set; }
        public DbSet<About> Abouts { get; set; }
        public DbSet<Contact> Contacts { get; set; }
        public DbSet<ArchitectureCategory> ArchitectureCategories { get; set; }
        public DbSet<Color> Colors { get; set; }
        public DbSet<ArchitectureNew> ArchitectureNews { get; set; }
    
        public virtual ObjectResult<spNewsPaging_Result> spNewsPaging(Nullable<int> pagesize, Nullable<int> pagenum, string categoryId, string keySearch, Nullable<long> appID, string keyName)
        {
            var pagesizeParameter = pagesize.HasValue ?
                new ObjectParameter("pagesize", pagesize) :
                new ObjectParameter("pagesize", typeof(int));
    
            var pagenumParameter = pagenum.HasValue ?
                new ObjectParameter("pagenum", pagenum) :
                new ObjectParameter("pagenum", typeof(int));
    
            var categoryIdParameter = categoryId != null ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(string));
    
            var keySearchParameter = keySearch != null ?
                new ObjectParameter("KeySearch", keySearch) :
                new ObjectParameter("KeySearch", typeof(string));
    
            var appIDParameter = appID.HasValue ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(long));
    
            var keyNameParameter = keyName != null ?
                new ObjectParameter("KeyName", keyName) :
                new ObjectParameter("KeyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNewsPaging_Result>("spNewsPaging", pagesizeParameter, pagenumParameter, categoryIdParameter, keySearchParameter, appIDParameter, keyNameParameter);
        }
    }
}
